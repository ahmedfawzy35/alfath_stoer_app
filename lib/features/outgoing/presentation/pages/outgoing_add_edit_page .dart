import 'package:alfath_stoer_app/features/outgoing/data/models/outgoing_model.dart';
import 'package:alfath_stoer_app/features/outgoing/presentation/cubit/outgoing_list_cubit.dart';
import 'package:alfath_stoer_app/features/outgoing/presentation/cubit/outgoing_list_state.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class OutGoingAddEditPage extends StatefulWidget {
  final OutGoig? model;

  const OutGoingAddEditPage({Key? key, this.model}) : super(key: key);

  @override
  OutGoingAddEditPageState createState() => OutGoingAddEditPageState();
}

class OutGoingAddEditPageState extends State<OutGoingAddEditPage> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _notesController;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.model?.name ?? '');
    _notesController = TextEditingController(text: widget.model?.notes ?? '');
  }

  @override
  void dispose() {
    _nameController.dispose();
    _notesController.dispose();

    super.dispose();
  }

  void _submitForm() {
    if (_formKey.currentState!.validate()) {
      final outgoing = OutGoig(
        id: widget.model?.id ??
            0, // Assuming id is autogenerated if 0 for new seller
        name: _nameController.text,
        notes: _notesController.text,

        brancheId: 0, // Will be set in the cubit
      );

      if (widget.model == null) {
        context.read<OutGoigListCubit>().add(outgoing);
      } else {
        context.read<OutGoigListCubit>().update(outgoing);
        // Implement update method in SellerListCubit
        Navigator.pop(context);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        appBar: AppBar(
          title: Text(widget.model == null
              ? 'اضافة بند مصروفات'
              : 'تعديل بند مصروفات  ${widget.model!.name}'),
        ),
        body: BlocListener<OutGoigListCubit, OutGoigListState>(
          listener: (context, state) {
            if (state is OutGoigListError) {
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                content: Text(state.message),
              ));
            }
            if (state is OutGoigLoaded) {
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                backgroundColor: Colors.green,
                content: Text(
                    'تم ${widget.model == null ? ' اضافة ' : ' تعديل'} بند المصروفات بنجاح'),
              ));
            } else if (state is OutGoigListError) {
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                backgroundColor: Colors.red,
                content: Text(
                    'فشل ${widget.model == null ? ' اضافة ' : ' تعديل'} بند المصروفات '),
              ));
            }
          },
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Form(
              key: _formKey,
              child: Column(
                children: [
                  TextFormField(
                    controller: _nameController,
                    decoration: const InputDecoration(labelText: 'الاسم'),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'من فضلك ادخل الاسم';
                      }
                      return null;
                    },
                  ),
                  TextFormField(
                    controller: _notesController,
                    decoration: const InputDecoration(labelText: 'تفاصيل'),
                  ),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: _submitForm,
                    child: Text(widget.model == null
                        ? 'اضافة بند مصروفات'
                        : 'تعديل بند المصروفات'),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
