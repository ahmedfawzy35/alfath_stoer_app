import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:alfath_stoer_app/features/seller/data/models/seller_model.dart';
import 'package:alfath_stoer_app/features/seller/presentation/cubit/seller_list_cubit.dart';
import 'package:alfath_stoer_app/features/seller/presentation/cubit/seller_list_state.dart';

class SellerAddEditPage extends StatefulWidget {
  final SellerModel? seller;

  const SellerAddEditPage({Key? key, this.seller}) : super(key: key);

  @override
  _SellerAddEditPageState createState() => _SellerAddEditPageState();
}

class _SellerAddEditPageState extends State<SellerAddEditPage> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _addressController;
  late TextEditingController _startAccountController;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.seller?.name ?? '');
    _addressController =
        TextEditingController(text: widget.seller?.adress ?? '');
    _startAccountController = TextEditingController(
        text: widget.seller?.startAccount.toString() ?? '0.0');
  }

  @override
  void dispose() {
    _nameController.dispose();
    _addressController.dispose();
    _startAccountController.dispose();
    super.dispose();
  }

  void _submitForm() {
    if (_formKey.currentState!.validate()) {
      final seller = SellerModel(
        id: widget.seller?.id ??
            0, // Assuming id is autogenerated if 0 for new seller
        name: _nameController.text,
        adress: _addressController.text,
        startAccount: double.tryParse(_startAccountController.text) ?? 0.0,
        brancheId: 0, // Will be set in the cubit
      );

      if (widget.seller == null) {
        context.read<SellerListCubit>().add(seller);
      } else {
        context.read<SellerListCubit>().update(seller);
        // Implement update method in SellerListCubit
        Navigator.pop(context);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        appBar: AppBar(
          title: Text(widget.seller == null
              ? 'اضافة مورد'
              : 'تعديل مورد  ${widget.seller!.name}'),
        ),
        body: BlocListener<SellerListCubit, SellerListState>(
          listener: (context, state) {
            if (state is SellerListError) {
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                content: Text(state.message),
              ));
            }
            if (state is SellerLoaded) {
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                backgroundColor: Colors.green,
                content: Text(
                    'تم ${widget.seller == null ? ' اضافة ' : ' تعديل'} المورد بنجاح'),
              ));
            } else if (state is SellerListError) {
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                backgroundColor: Colors.red,
                content: Text(
                    'فشل ${widget.seller == null ? ' اضافة ' : ' تعديل'} المورد '),
              ));
            }
          },
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Form(
              key: _formKey,
              child: Column(
                children: [
                  TextFormField(
                    controller: _nameController,
                    decoration: const InputDecoration(labelText: 'الاسم'),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter a name';
                      }
                      return null;
                    },
                  ),
                  TextFormField(
                    controller: _addressController,
                    decoration: const InputDecoration(labelText: 'العنوان'),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter an address';
                      }
                      return null;
                    },
                  ),
                  TextFormField(
                    controller: _startAccountController,
                    decoration:
                        const InputDecoration(labelText: 'الحساب المبدئي'),
                    keyboardType: TextInputType.number,
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'من فضلك ادخل الحساب المبدئي';
                      }
                      if (double.tryParse(value) == null) {
                        return 'من فضلك ادخل رقم صالح';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: _submitForm,
                    child: Text(
                        widget.seller == null ? 'اضافة مورد' : 'تعديل المورد'),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
